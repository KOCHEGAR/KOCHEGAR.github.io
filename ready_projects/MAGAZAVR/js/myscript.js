// Generated by CoffeeScript 1.4.0
(function() {
  var $;

  $ = window.jQuery || window.Zepto || window.$;

  $.fn.fancySelect = function(opts) {
    var isiOS, settings;
    if (opts == null) {
      opts = {};
    }
    settings = $.extend({
      forceiOS: false,
      includeBlank: false,
      optionTemplate: function(optionEl) {
        return optionEl.text();
      },
      triggerTemplate: function(optionEl) {
        return optionEl.text();
      }
    }, opts);
    isiOS = !!navigator.userAgent.match(/iP(hone|od|ad)/i);
    return this.each(function() {
      var copyOptionsToList, disabled, options, sel, trigger, updateTriggerText, wrapper;
      sel = $(this);
      if (sel.hasClass('fancified') || sel[0].tagName !== 'SELECT') {
        return;
      }
      sel.addClass('fancified');
      sel.css({
        width: 1,
        height: 1,
        display: 'block',
        position: 'absolute',
        top: 0,
        left: 0,
        opacity: 0
      });
      sel.wrap('<div class="fancy-select">');
      wrapper = sel.parent();
      if (sel.data('class')) {
        wrapper.addClass(sel.data('class'));
      }
      wrapper.append('<div class="trigger">');
      if (!(isiOS && !settings.forceiOS)) {
        wrapper.append('<ul class="options">');
      }
      trigger = wrapper.find('.trigger');
      options = wrapper.find('.options');
      disabled = sel.prop('disabled');
      if (disabled) {
        wrapper.addClass('disabled');
      }
      updateTriggerText = function() {
        var triggerHtml;
        triggerHtml = settings.triggerTemplate(sel.find(':selected'));
        return trigger.html(triggerHtml);
      };
      sel.on('blur.fs', function() {
        if (trigger.hasClass('open')) {
          return setTimeout(function() {
            return trigger.trigger('close.fs');
          }, 120);
        }
      });
      trigger.on('close.fs', function() {
        trigger.removeClass('open');
        return options.removeClass('open');
      });
      trigger.on('click.fs', function() {
        var offParent, parent;
        if (!disabled) {
          trigger.toggleClass('open');
          if (isiOS && !settings.forceiOS) {
            if (trigger.hasClass('open')) {
              return sel.focus();
            }
          } else {
            if (trigger.hasClass('open')) {
              parent = trigger.parent();
              offParent = parent.offsetParent();
              if ((parent.offset().top + parent.outerHeight() + options.outerHeight() + 20) > $(window).height() + $(window).scrollTop()) {
                options.addClass('overflowing');
              } else {
                options.removeClass('overflowing');
              }
            }
            options.toggleClass('open');
            if (!isiOS) {
              return sel.focus();
            }
          }
        }
      });
      sel.on('enable', function() {
        sel.prop('disabled', false);
        wrapper.removeClass('disabled');
        disabled = false;
        return copyOptionsToList();
      });
      sel.on('disable', function() {
        sel.prop('disabled', true);
        wrapper.addClass('disabled');
        return disabled = true;
      });
      sel.on('change.fs', function(e) {
        if (e.originalEvent && e.originalEvent.isTrusted) {
          return e.stopPropagation();
        } else {
          return updateTriggerText();
        }
      });
      sel.on('keydown', function(e) {
        var hovered, newHovered, w;
        w = e.which;
        hovered = options.find('.hover');
        hovered.removeClass('hover');
        if (!options.hasClass('open')) {
          if (w === 13 || w === 32 || w === 38 || w === 40) {
            e.preventDefault();
            return trigger.trigger('click.fs');
          }
        } else {
          if (w === 38) {
            e.preventDefault();
            if (hovered.length && hovered.index() > 0) {
              hovered.prev().addClass('hover');
            } else {
              options.find('li:last-child').addClass('hover');
            }
          } else if (w === 40) {
            e.preventDefault();
            if (hovered.length && hovered.index() < options.find('li').length - 1) {
              hovered.next().addClass('hover');
            } else {
              options.find('li:first-child').addClass('hover');
            }
          } else if (w === 27) {
            e.preventDefault();
            trigger.trigger('click.fs');
          } else if (w === 13 || w === 32) {
            e.preventDefault();
            hovered.trigger('mousedown.fs');
          } else if (w === 9) {
            if (trigger.hasClass('open')) {
              trigger.trigger('close.fs');
            }
          }
          newHovered = options.find('.hover');
          if (newHovered.length) {
            options.scrollTop(0);
            return options.scrollTop(newHovered.position().top - 12);
          }
        }
      });
      options.on('mousedown.fs', 'li', function(e) {
        var clicked;
        clicked = $(this);
        sel.val(clicked.data('raw-value'));
        if (!isiOS) {
          sel.trigger('blur.fs').trigger('focus.fs');
        }
        options.find('.selected').removeClass('selected');
        clicked.addClass('selected');
        trigger.addClass('selected');
        return sel.val(clicked.data('raw-value')).trigger('change.fs').trigger('blur.fs').trigger('focus.fs');
      });
      options.on('mouseenter.fs', 'li', function() {
        var hovered, nowHovered;
        nowHovered = $(this);
        hovered = options.find('.hover');
        hovered.removeClass('hover');
        return nowHovered.addClass('hover');
      });
      options.on('mouseleave.fs', 'li', function() {
        return options.find('.hover').removeClass('hover');
      });
      copyOptionsToList = function() {
        var selOpts;
        updateTriggerText();
        if (isiOS && !settings.forceiOS) {
          return;
        }
        selOpts = sel.find('option');
        return sel.find('option').each(function(i, opt) {
          var optHtml;
          opt = $(opt);
          if (!opt.prop('disabled') && (opt.val() || settings.includeBlank)) {
            optHtml = settings.optionTemplate(opt);
            if (opt.prop('selected')) {
              return options.append("<li data-raw-value=\"" + (opt.val()) + "\" class=\"selected\">" + optHtml + "</li>");
            } else {
              return options.append("<li data-raw-value=\"" + (opt.val()) + "\">" + optHtml + "</li>");
            }
          }
        });
      };
      sel.on('update.fs', function() {
        wrapper.find('.options').empty();
        return copyOptionsToList();
      });
      return copyOptionsToList();
    });
  };

}).call(this);
;(function($, specialEventName) {
  'use strict';

  /**
   * Native event names for creating custom one.
   *
   * @type {Object}
   */
  var nativeEvent = Object.create(null);
  /**
   * Get current time.
   *
   * @return {Number}
   */
  var getTime = function() {
    return new Date().getTime();
  };

  nativeEvent.original = 'click';

  if ('ontouchstart' in document) {
    nativeEvent.start = 'touchstart';
    nativeEvent.end = 'touchend';
  } else {
    nativeEvent.start = 'mousedown';
    nativeEvent.end = 'mouseup';
  }

  $.event.special[specialEventName] = {
    setup: function(data, namespaces, eventHandle) {
      var $element = $(this);
      var eventData = {};

      $element
        // Remove all handlers that were set for an original event.
        .off(nativeEvent.original)
        // Prevent default actions.
        .on(nativeEvent.original, false)
        // Split original event by two different and collect an information
        // on every phase.
        .on(nativeEvent.start + ' ' + nativeEvent.end, function(event) {
          // Handle the event system of touchscreen devices.
          eventData.event = event.originalEvent.changedTouches ? event.originalEvent.changedTouches[0] : event;
        })
        .on(nativeEvent.start, function(event) {
          // Stop execution if an event is simulated.
          if (event.which && event.which !== 1) {
            return;
          }

          eventData.target = event.target;
          eventData.pageX = eventData.event.pageX;
          eventData.pageY = eventData.event.pageY;
          eventData.time = getTime();
        })
        .on(nativeEvent.end, function(event) {
          // Compare properties from two phases.
          if (
            // The target should be the same.
            eventData.target === event.target &&
            // Time between first and last phases should be less than 750 ms.
            getTime() - eventData.time < 750 &&
            // Coordinates, when event ends, should be the same as they were
            // on start.
            (
              eventData.pageX === eventData.event.pageX &&
              eventData.pageY === eventData.event.pageY
            )
          ) {
            event.type = specialEventName;
            event.pageX = eventData.event.pageX;
            event.pageY = eventData.event.pageY;

            eventHandle.call(this, event);

            // If an event wasn't prevented then execute original actions.
            if (!event.isDefaultPrevented()) {
              $element
                // Remove prevention of default actions.
                .off(nativeEvent.original)
                // Bring the action.
                .trigger(nativeEvent.original);
            }
          }
        });
    },

    remove: function() {
      $(this).off(nativeEvent.start + ' ' + nativeEvent.end);
    }
  };

  $.fn[specialEventName] = function(fn) {
    return this[fn ? 'on' : 'trigger'](specialEventName, fn);
  };
})(jQuery, 'tap');
;$(document).ready(function() {



	$(function(){
 		
 		$("html").removeClass("no-js");
 		
		
		var $brandLetters = $(".our-brands__letters a");
		var $brands = $(".brands");
	   	var $brandsBlock = $(".brands__block");
	   	var $brandsHeader = undefined;
	   	var $brand = $(".brands__block .brand");
		var $brand__link  = $(".brand__name > a");

		var $catalog_btn  = $(".catalog");
		var $catalog_categories = $(".catalog__categories");
		var $categoriesItem = $(".catalog__categories-item");
		var $categoriesItemLink = $(".catalog__categories-item > a");
		var $catalogDropdown = $(".catalog__dropdown ");
		var $catalogListItemsLinks = $(".catalog__list-items a");

		var $topMenuBtn = $(".dropdown-btn");

		var $previousFavor = undefined;

		$brandsBlock.addClass("brands__block--not-selected");
		
		$brand__link.before("<div class='favor favor--hidden'><span class='icon-heart icon-heart--not-active'></span><a href='#'>Добавить в любимые бренды</a></div>");
		
		var $favorTooltip = $(".favor");
		var $favorTooltipLink = $(".favor > a");



		$categoriesItemLink.removeAttr("target");
		$catalogListItemsLinks.removeAttr("target");
		$brand__link.removeAttr("target");/*убираю переходы по ссылкам*/

		


		$("#js-search__select").fancySelect();


		var  tchstrt=false,
			    tchmv=false,
			    tchnd=false;
		var isScroll = false;

		function toggleTopMenu(e) {
			e.preventDefault();
		
			$(".page-header__block-divider--2").toggleClass("page-header__block-divider--2-hide");
			$(".dropdown-btn__cross").toggleClass("dropdown-btn__cross--show");
			$(".dropdown-btn__burger").toggleClass("dropdown-btn__burger--hide");	
		}

		function toggleCatalog(e) {

			e.stopPropagation();

			if (!($catalog_categories.hasClass("catalog__categories--show"))) {
				$catalog_categories.addClass("catalog__categories--show");
			}
			else {

				$catalog_categories.removeClass("catalog__categories--show");

				if ($categoriesItem.hasClass("touch-hover")) {
					$categoriesItem.removeClass("touch-hover");
				}	
			}
	
			if (e.originalEvent.type == "touchend") {

				if (!($catalog_categories.hasClass("touch-device"))) {

					$catalog_categories.addClass("touch-device");
				}
			}	
		}

		function hidePreviousFavor() {
			if ($previousFavor !== undefined) {
				if ($previousFavor.hasClass("favor--visible")) {
					hideFavor($previousFavor);
				}
			}
		}

		function hideFavor($f) {
			var $favor = $f;
		    $favor.removeClass("favor--visible").addClass("favor--hidden");
		}

		function showFavor($f) {
			var $favor = $f;
	        $favor.removeClass("favor--hidden").addClass("favor--visible");   
		}

		function addToFavorite(e, $fv) {

			e.preventDefault();
			e.stopPropagation();
	   		
	   		var $currentBrand__link = $fv.parent().parent().find(" > a");
        	var $currentFavor = $fv.parent();
        	var $icon_heart = $currentFavor.find(".icon-heart");


	   		if (!($currentBrand__link.hasClass("added-state"))) {

	          $currentBrand__link.addClass("added-state");

	          $icon_heart.removeClass("icon-heart--not-active").addClass("icon-heart--active");
	                       
	          $fv.text("Убрать из любимых брендов");

      		}
	   		else {

	          $currentBrand__link.removeClass("added-state");
	          $fv.text("Добавить в любимые бренды");

	          $icon_heart.removeClass("icon-heart--active").addClass("icon-heart--not-active");
       		}
		}

		function checkBrandLink(e, $brndLink) {

			e.stopPropagation();
			e.preventDefault();

			var $f = $brndLink.parent().find(".favor");
			
			dblTapTransition(e, $brndLink);
			hidePreviousFavor();

			if ($f.hasClass("favor--hidden")) {
				showFavor($f);
			}

			$previousFavor = $f;
		}

		function dblTapTransition(e, $link) {

			var $currentLink = $link;
	
			
			if (e.originalEvent.type == "mouseup") {

				var href = $currentLink.attr("href");
				window.open(href) ;
				return false;
			}

			if (e.originalEvent.type == "touchend"){

				if ( !($currentLink.is("[data-counter]"))) {
					
					$currentLink.attr("data-counter", 1);
				}


				if ($currentLink.attr("data-counter") == 1) {
								
					e.preventDefault();
			
					$currentLink.attr("data-counter", 2);

					setTimeout(function(){

						$currentLink.removeAttr("data-counter");

					},1500);
					
				}
				else{

					$currentLink.removeAttr("data-counter");
					var href = $currentLink.attr("href");
					window.open( href) ;
					return false;
				}
			}
		}



		$topMenuBtn.on({

			
			"tap" : function(e){ toggleTopMenu(e); },	

			"touchstart" : function(e){
				if (e.type == "touchstart") {
					tchstrt=true;
				}
				return false;
			},

			"touchmove" : function(e){

				if (tchstrt) {
					tchstrt=false;

					toggleTopMenu(e);
				}
				
				return false;
			},
		});		

		$catalog_btn.on({

			"tap" : function(e){ 	
	
				toggleCatalog(e);
			},

			"touchstart" : function(e){

				if (e.type == "touchstart") {

					tchstrt=true;
				}
				return false;
			},

			"touchmove" : function(e){
				if (tchstrt) {
					tchstrt=false;

					toggleCatalog(e);
				}
			},
		});

		$catalog_categories.on({

			"touchstart touchmove" : function(e){
				e.stopPropagation();
			}
			
		});

		$categoriesItemLink.tap(function(e){
				
			
			if ($catalog_categories.hasClass("touch-device")) {
		
				if ($categoriesItem.hasClass("touch-hover")) {
					
					$categoriesItem.removeClass("touch-hover");	
				}
				
				$(this).parent().addClass("touch-hover");
			}

			

			if (e.originalEvent.type == "touchend" && (window.matchMedia("(min-width: 64em)").matches)) {/*тут тап*/
				
			 	dblTapTransition(e, $(this));
			}
			else{
				
				e.preventDefault();
				var href = $(this).attr("href");
				
				/*а вот тут я хочу показать эффект нааведение перед уходом в новое окно ;D*/
						
				setTimeout(function(){	
					$catalog_categories.removeClass("catalog__categories--show");
					$categoriesItem.removeClass("touch-hover");

					window.open(href);
					
				},100);

			}
			
		});


		$catalogListItemsLinks.tap(function(e){
			document.location.href = $(this).attr("href");

			$categoriesItem.removeClass("touch-hover");	
			$catalog_categories.removeClass("catalog__categories--show");
		});


		$brand__link.on({

			tap : function(e){

				checkBrandLink(e, $(this));
			},


			touchstart : function(e){

				tchstrt = true;
			},

			touchmove : function(e){
				if (tchstrt) {
					tchstrt = false;

					checkBrandLink(e, $(this));
				}
			},

	
			mouseenter: function(){

				var $f = $(this).parent().find(".favor");

				hidePreviousFavor();

				$previousFavor = $f;
				
			    showFavor($f);
			},

			mouseleave : function(){
				var $f = $(this).parent().find(".favor");
          		hideFavor($f);
		            
		    },
		});

	

		$favorTooltip.on({
			mouseenter : function(e){
				
				showFavor($(this));
	
			},
			mouseleave : function(e){
				
				hideFavor($(this));

		    },
		});

	   	$favorTooltipLink.on({

			tap : function(e){
				

				addToFavorite(e, $(this));
				
			},
			
			touchstart : function(e){
				tchstrt = true;
			},

			touchmove : function(e){

				if (tchstrt) {

					tchstrt = false;

					addToFavorite(e, $(this));
				}
			},

	   	}); 

	

	   	/*фильтрация*/

	   	var $previousBrandsBlock = undefined;
	   
		$brandLetters.on("tap touchmove",function(e){ //тут тачмув

			e.preventDefault();
	
			if ($(this).hasClass("active")) {return false;}


			if ($brandLetters.hasClass("active")) {

			 	$brandLetters.removeClass("active"); 
			 	$(this).addClass("active");

			 	if ($brandsHeader !== undefined) {

			 		var $block = $brandsHeader.context;
			 		$brandsHeader.prependTo($block);
			 		$brandsHeader = undefined;
			 	}
			 	

			 	var char = $(this).data("char");
			 	if (char) {

					$brandsBlock.hide();
			 		$brands.hide();

			 		
			 		$brandsBlock.each(function(){
			 			var b =  $(this).data("char");

			 			if (b == char) {

			 				var $c = $(this);

			 				if ($previousBrandsBlock !== undefined) {
				 				$previousBrandsBlock.find(".brand").removeClass("brand--selected");
			 				}

			 				$brandsHeader = $c.find(".brands__header").detach();

			 				$c.removeClass("brands__block--not-selected")
			 				  .addClass("brands__block--selected");

		
			 				$c.show().parent().show();

			 				$(this).find(".brand").each(function(){
			 					$(this).addClass("brand--selected");
			 				});

			 				$previousBrandsBlock = $c;
			 			}
			 		});
			 	}
			 	else{
			 		
			 		if ($brandsBlock.hasClass("brands__block--selected")) {

			 			$brandsBlock.removeClass("brands__block--selected");
			 			$brandsBlock.addClass("brands__block--not-selected");
			 			$brand.removeClass("brand--selected");
			 		}
			 		
			 		
			 		$brandsBlock.show();
			 		$brands.show();

			 		$brandsHeader = undefined;
			 		
			 	}
			}

		});




		$(document).on({

			"tap" : function(e){
		
				if ($catalog_categories.hasClass("catalog__categories--show")) {
					$catalog_categories.removeClass("catalog__categories--show");
				}



				hidePreviousFavor();
			},

		});

	});
});
	
